### 解题思路

1. 保留好要返回的头节点
2. l1,l2等长时,做加法,当前位保留个位数,进位保留十位数.加法时要加上进位.
3. 单独判断l1,l2是否有长出来的,如果有,单独追加到结果,同样要加上进位计算.l1,l2的单独循环只能满足一个.
4. 最后判断进位

by 瓦片

### 代码

* java

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
	public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
		ListNode p = new ListNode();
		ListNode head = p;
		int carry = 0;
		while (l1 != null && l2 != null) {
			p.next = new ListNode();
			p = p.next;
			int num = l1.val + l2.val + carry;
			p.val = num % 10;
			carry = num / 10;
			l1 = l1.next;
			l2 = l2.next;
		}
		while (l1 != null) {
			p.next = new ListNode();
			p = p.next;
			int num = l1.val + carry;
			p.val = num % 10;
			carry = num / 10;
			l1 = l1.next;
		}
		while (l2 != null) {
			p.next = new ListNode();
			p = p.next;
			int num = l2.val + carry;
			p.val = num % 10;
			carry = num / 10;
			l2 = l2.next;
		}
		if (carry != 0) {
			p.next = new ListNode();
			p = p.next;
			p.val = carry;
		}
		return head.next;
	}
}
```

