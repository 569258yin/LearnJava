### 1，双指针求解

这题要求链表的倒数第k个节点，最简单的方式就是使用两个指针，**第一个指针先移动k步，然后第二个指针再从头开始，这个时候这两个指针同时移动，当第一个指针到链表的末尾的时候，返回第二个指针即可**。
![image.png](https://pic.leetcode-cn.com/822a27c941efca184afcaa299c9fea3f543c73e8a20ce48529c8b5201c636525-image.png)

* 

```
public int kthToLast(ListNode head, int k) {
    ListNode first = head;
    ListNode second = head;
    //第一个指针先走k步
    while (k-- > 0) {
        first = first.next;
    }
    //然后两个指针在同时前进
    while (first != null) {
        first = first.next;
        second = second.next;
    }
    return second.val;
}
```

看一下运行结果
![image.png](https://pic.leetcode-cn.com/1603808201-ikBdfR-image.png)

<br> </br>

### 2，使用栈解决

这题要求的是返回后面的k个节点，我们只要把原链表的结点全部压栈，然后再把栈中最上面的k个节点出栈，出栈的结点重新串成一个新的链表即可，原理也比较简单，直接看下代码。

* 

```
public int kthToLast(ListNode head, int k) {
    Stack<ListNode> stack = new Stack<>();
    //链表节点压栈
    while (head != null) {
        stack.push(head);
        head = head.next;
    }
    //在出栈串成新的链表
    ListNode firstNode = stack.pop();
    while (--k > 0) {
        ListNode temp = stack.pop();
        temp.next = firstNode;
        firstNode = temp;
    }
    return firstNode.val;
}
```

看一下运行结果，这个效率就差很多了
![image.png](https://pic.leetcode-cn.com/1603808256-mdjCUH-image.png)

<br> ### 3，递归求解 之前讲过链表的逆序打印[410，剑指 Offer-从尾到头打印链表](https://mp.weixin.qq.com/s/caOEBjxDY7rxU5yG-ilfOw)，其中有这样一段代码 ``` public void reversePrint(ListNode head) { if (head == null) return; reversePrint(head.next); System.out.println(head.val); } ``` 这段代码其实很简单，我们要理解他就要弄懂递归的原理，递归分为两个过程，**递**和**归**，看一下下面的图就知道了，先往下传递，当遇到终止条件的时候开始往回走。 ![image.png](https://pic.leetcode-cn.com/a4596a4cf3966dc7bf9db4a36ca01f22db030e195833d9eef14597b724077b5d-image.png) 前面也刚讲过递归的原理[426，什么是递归，通过这篇文章，让你彻底搞懂递归](https://mp.weixin.qq.com/s/PgSSYc50ajnbh8zD6Ei07g)，这题如果使用递归的话，我们先来看一下递归的模板 ``` public ListNode getKthFromEnd(ListNode head, int k) { //终止条件 if (head == null) return head; //递归调用 ListNode node = getKthFromEnd(head.next, k); //逻辑处理 …… } ``` 终止条件很明显就是当节点head为空的时候，就没法递归了，这里主要看的是逻辑处理部分，当递归往下传递到最底端的时候，就会触底反弹往回走，在往回走的过程中记录下走过的节点，当达到k的时候，说明到达的那个节点就是倒数第k个节点，直接返回即可，如果没有达到k，就返回空，搞懂了上面的过程，代码就很容易写了 ``` //全局变量，记录递归往回走的时候访问的结点数量 int size; </br>

    public int kthToLast(ListNode head, int k) {
        //边界条件判断
        if (head == null)
            return 0;
        int val = kthToLast(head.next, k);
        ++size;
        //从后面数结点数小于k，返回空
        if (size < k) {
            return 0;
        } else if (size == k) {
            //从后面数访问结点等于k，直接返回传递的结点k即可
            return head.val;
        } else {
            //从后面数访问的结点大于k，说明我们已经找到了，
            //直接返回node即可
            return val;
        }
    }

* 

```
看一下运行结果
![image.png](https://pic.leetcode-cn.com/1603808376-iTZPnz-image.png)


上面代码在仔细一看，当size小于k的时候node节点就是空，所以我们可以把size大于k和小于k合并为一个，这样代码会更简洁一些
```

    int size;
    
    public int kthToLast(ListNode head, int k) {
        if (head == null)
            return 0;
        int value = kthToLast(head.next, k);
        if (++size == k)
            return head.val;
        return value;
    }

* 

```
看一次运行结果
![image.png](https://pic.leetcode-cn.com/1603808444-idQfNI-image.png)


<br>

我把部分算法题整理成了PDF文档，截止目前总共有**900多页**，大家可以下载阅读
**链接**：https://pan.baidu.com/s/1hjwK0ZeRxYGB8lIkbKuQgQ 
**提取码**：6666 

#### 如果觉得有用就给个赞吧，还可以关注我的[LeetCode主页](https://leetcode-cn.com/u/sdwwld/)查看更多的详细题解
```

