## 解题思路

输入一个字符串 $s_1$ ，做如下操作：

1. 选择任意位置，将字符串切分为两个子字符串 $s_1 = L \ R$ ；
2. 将 $R$ 移动至 $L$ 前面得到 $s_2 = R \ L$ ；

此时，称 $s_2$ 为 $s_1$ 的一个「旋转字符串」。

![ccw-01-09.001-004.gif](https://pic.leetcode-cn.com/1638612131-zkecdf-ccw-01-09.001-004.gif)

如下图所示，根据旋转字符串特点，若构造一个拼接字符串 $s_2 \ s_2$ ，则有 $s_2 \ s_2 = R \ L \ R \ L = R \ s_1 \ L$ ，即拼接字符串 $s_2 \ s_2$ 中**包含**原字符串 $s_1$ 。因此，$s_2$ 为 $s_1$ 的旋转字符串的「充要条件」为：

- 字符串 $s_1$ , $s_2$ 的长度相等；
- 拼接字符串 $s_2 \ s_2$ 中**包含**原字符串 $s_1$ ；

![ccw-01-09.005.png](https://pic.leetcode-cn.com/1638612131-tGESRo-ccw-01-09.005.png)

## 代码

* []

```Python
class Solution:
    def isFlipedString(self, s1: str, s2: str) -> bool:
        return len(s1) == len(s2) and s1 in (s2 + s2)
```

* []

```Java
class Solution {
    public boolean isFlipedString(String s1, String s2) {
        return s1.length() == s2.length() && (s2 + s2).contains(s1);
    }
}
```

* []

```C++
class Solution {
public:
    bool isFlipedString(string s1, string s2) {
        return s1.length() == s2.length() && (s2 + s2).find(s1) != -1;
    }
};
```

## 复杂度分析

**时间复杂度：** 设字符串 $s_1$ , $s_2$ 的长度都为 $N$ 。

- 「暴力匹配」需要分别以 $s_2$ 前 $N$ 个字符为起始点，遍历匹配 $s_1$ ，总体时间复杂度为 $O(N^2)$ 。
- 「子串匹配 KMP 算法」的时间复杂度为 $O(N)$ 。
- 「Boyer–Moore string-search algorithm」时间复杂度为 $O(N)$ 。

> 本文直接调用编程语言的库函数，时间复杂度由库函数的具体实现方法确定。

**空间复杂度 $O(N)$ ：** 构造拼接字符串 $s_2 \ s_2$ 使用 $O(N)$ 大小的额外空间。
