## 思路

### 1.注意提示

1. 值唯一：说明查找的结果唯一，不会有干扰项。

2. `p,q`不同且都在二叉树中：不会存在没有公共祖先的情况。

### 2. 最近公共祖先的3种情况

![image.png](https://pic.leetcode-cn.com/1599188567-PMGmDQ-image.png)

### 3. 基于查找来判断最近公共祖先

1. 采用深度优先搜索（先搜索完，再判断）

2. 用`left`记录在左子树中查找`p`或`q`的情况，**找到了其中之一立刻结束查找**！找不到为`null`.

3. 用`right`记录在右子树中查找`p`或`q`的情况，**找到了其中之一立刻结束查找！**！找不到为`null`.

4. 根据这样的查找方法，解释上述3种情况：
   - $case 1$：`left = 3, right = 8`，都不为`null`，因此`root = 5`就是它们的最近公共祖先。
   - $case 2$：`left = 3, right = null`，**特别注意找到了`3`就立刻结束了对整个左子树的查找，所以`right = null`是在右子树中找不到`p`或`q`导致的，故`right`不是`4`**，该情况下，说明剩下一个没找到的也在左子树中，而`3`是先被找到的，所以`3`就是它们的最近公共祖先。
   - $case 3$：`p,q`中有一个就是`root`，它们的最近最近公共祖先就是`root`.

## 代码

* java

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // 到底了还没找到，返回 null
        if (root == null) {
            return null;
        }
        // 如果找到了 p 或 q，返回它
        if (root == p || root == q) {
            return root;
        }
        TreeNode left = lowestCommonAncestor(root.left, p, q);  // left 记录 p 或 q 是在左子树找到的
        TreeNode right = lowestCommonAncestor(root.right, p, q); // right 记录 p 或 q 是在右子树找到的
        // 如果 left 和 right 都记录了找到的节点，那么肯定是一个记录了 p ，另一个记录了 q
        // 它们分别在以 root 为根的左右子树中，所以 root 就是它们的最近公共祖先
        if (left != null && right != null) {
            return root;
        }
        // 由于节点 p,q 一定在二叉树中，left和right不会同时为null
        // 若 left != null && right == null，说明在左子树中找到 p 或 q，而在右子树找不到 p 或 q，则剩下一个也在左子树
        // 所以 left 就是最近公共祖先
        // 另一种情况同理
        return (left != null) ? left : right;
    }
}
```

## 算法分析

设`n`为二叉树的节点个数。
1. 访问所有节点一次且仅一次，时间复杂度为$O(n)$.

2. 递归使用栈辅助空间，空间复杂度为$O(n)$.

### 如果本文对你有帮助，可以给个大拇指呀！

### 如果你有什么建议或疑问，可以评论留言呀！

