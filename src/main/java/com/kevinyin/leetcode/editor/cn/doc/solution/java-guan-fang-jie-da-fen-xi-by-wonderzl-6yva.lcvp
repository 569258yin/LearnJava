整理思路。

按照访问二叉树的传统思路，这道题需要从树中每个结点向下做深度搜索，查找向下的每个路径是否等于给定值。时间复杂度N^2。

leetcode中只要求返回路径数量，如果按照书中原题的要求去打印路径，深搜的方法会大量地使用内存，因为树中每个结点可能都要新建数组保存。

官方推导

**第一步：简化——假设路径必须从根节点开始，但可以在任意结点结束，怎么解决？**

就是使用深度搜索，从根节点开始，向左向右访问子结点，结算每条路径上的总和并比较。注意，就算找到总和，仍然要继续访问这条路径。因为这条路径往下可能还有总和为0的一段子路径，这样总和仍为sum。

**第二步：推广——路径可以从任意结点开始，但是“向上”计算是否有符合条件的路径。**

使用数组记录当前的路径，对于每个结点，我们都向“上”检查是否得到相符的总和。也就是，不再要求“从这个结点开始是否会有总和为给定值的路径”，而是关注“这个结点是否为总和等于给定值的某条路径的末端”。

递归访问每个结点n时，将root到n的完整路径传入该函数。随后，这个函数会以相反的顺序，从n到root，将路径上的结点值加起来。每个等于给定值的总和，都记录下来。

**重点在于“逆向思维”。**从上往下访问，遍历整棵树或者处理数组都很麻烦。但是从下往上访问，每个结点就可以只被访问一次，虽然增加了数组访问时间。

官方答案

* java

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int pathSum(TreeNode root, int sum) {
        int depth = depth(root);
        int[] path = new int[depth];
        findSum(root,sum,path,0);
        return count;
    }
    
    int count = 0;

    private void findSum(TreeNode node,int sum,int[] path,int level) {
        if (node == null) {
            return;
        }
        // 当前结点插入路径
        path[level] = node.val;
        // 查找以此为重点且总和为sum的路径
        int t =0;
        for (int i=level; i>=0; i--) {
            t+=path[i];
            if (t==sum) {
                count++;
            }
        }
        // 查找此结点之下的结点
        findSum(node.left,sum,path,level+1);
        findSum(node.right,sum,path,level+1);
        
        // 从路径中移除当前结点
        path[level] = Integer.MIN_VALUE;
    }
    
    //查找二叉树最大深度
    private int depth(TreeNode node) {
        if (node == null) {
            return 0;
        } else {
            return 1+ Math.max(depth(node.left),depth(node.right));
        }
    }
}
```

