## 双指针

根据题意进行模拟即可，每次都使用 `i` 和 `j` 分别指向左端和右端可以被交换的字母，若当前指针指向的不是字母，则分别往中间移动，直到找到下一个可交换的字母位置，每次交换结束，两指针均往中间移动一位。

代码：

* []

```Java
class Solution {
    public String reverseOnlyLetters(String s) {
        char[] cs = s.toCharArray();
        int n = cs.length;
        for (int i = 0, j = n - 1; i < j; ) {
            while (i < j && !Character.isLetter(cs[i])) i++;
            while (i < j && !Character.isLetter(cs[j])) j--;
            if (i < j) {
                char c = cs[i];
                cs[i++] = cs[j];
                cs[j--] = c;
            }
        }
        return String.valueOf(cs);
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：调用 `toCharArray` 和构造新字符串均需要与字符串长度等同的空间。复杂度为 $O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
